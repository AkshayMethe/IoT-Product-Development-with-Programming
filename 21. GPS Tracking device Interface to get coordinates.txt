#include "Particle-GPS.h"
Gps _gps = Gps(&Serial1);
Timer _timer = Timer(1, onSerialData);
void setup()
{
     delay(2000);                                        //Initialize the USB Serial for debugging.
     Serial.begin();
     Serial.println("Initializing...");
     _gps.begin(9600);                             //Initialize the GPS.
     _timer.start();                                    //Start the timer.
}
void onSerialData()
{
      _gps.onSerialData();
}
void loop()
{
      Pgtop pgtop = Pgtop(_gps);           // Get the Antenna Status ($PGTOP).
if (pgtop.parse())
  {
     Serial.println("1) Antenna Status ($PGTOP)"); 
     Serial.println("====================================");
     Serial.print("Command ID: "); 
     Serial.println(pgtop.commandId);
     Serial.print("Antenna Status: ");
     Serial.println(pgtop.reference);
     Serial.println("");
 }      //Get the Global Positioning System Fixed Data ($GPGGA). 
    Gga gga = Gga(_gps);
  if (gga.parse())
  {
     Serial.println("2) Global Positioning System Fixed Data ($GPGGA)");
     Serial.println("=========================================");
     Serial.print("UTC Time: "); 
     Serial.println(gga.utcTime);
     Serial.print("Latitude: ");
     Serial.println(gga.latitude);
     Serial.print("North/SouthIndicator: "); 
     Serial.println(gga.northSouthIndicator);
     Serial.print("Longitude: "); 
     Serial.println(gga.longitude);
     Serial.print("East/WestIndicator: ");
     Serial.println(gga.eastWestIndicator);
     Serial.print("Position Fix Indicator: ");            
    Serial.print("Satellites Used: ");
    Serial.println(gga.positionFixIndicator);  
    Serial.println(gga.satellitesUsed);
    Serial.print("Horizontal Dilution of Precision: ");
    Serial.println(gga.hdop);
    Serial.print("Altitude: ");
    Serial.print(gga.altitude); 
    Serial.print(" ");   
    Serial.println(gga.altitudeUnit);
    Serial.print("Geoidal Separation: ");
    Serial.print(gga.geoidalSeparation);
    Serial.print(" "); Serial.println(gga.geoidalSeparationUnit);
    Serial.print("Age of Diff. Corr.: "); Serial.println(gga.ageOfDiffCorr);
    Serial.println("");
  }    //Get the Recommended Minimum Navigation Information ($GPRMC).
    Rmc rmc = Rmc(_gps);
  if (rmc.parse())
{
     Serial.println("3) Recommended Minimum Navigation Information ($GPRMC)");
    Serial.println("==============================================");
    Serial.print("UTC Time: "); 
    Serial.println(rmc.utcTime);
    Serial.print("Latitude: ");
    Serial.println(rmc.latitude);
    Serial.print("North/SouthIndicator: ");     
    Serial.println(rmc.northSouthIndicator);
    Serial.print("Longitude: ");
    Serial.println(rmc.longitude);
    Serial.print("East/WestIndicator: "); 
    Serial.println(rmc.eastWestIndicator);
    Serial.print("Speed Over Ground: "); 
    Serial.println(rmc.speedOverGround);
    Serial.print("Course Over Ground: "); 
    Serial.println(rmc.courseOverGround);
    Serial.print("Date: "); 
    Serial.println(rmc.date);
    Serial.print("Magnetic Variation: "); 
    Serial.print(rmc.magneticVariation);
    Serial.print(" ");
    Serial.println(rmc.magneticVariationDirection);
    Serial.print("Mode: "); 
    Serial.println(rmc.mode);
    Serial.println("");
  }
  delay(1000);
}
